fth TOSET is
  	protecting BOOL .
  	sort Elt .
  	op _<=_ : Elt Elt -> Bool .
  	vars X Y Z : Elt .
  	eq X <= X = true [nonexec] .
  	ceq X <= Z = true if (Y <= Z) and (X <= Y) [nonexec] .
  	eq X <= Y or Y <= X = true [nonexec] .
  	ceq X = Y if not (X <= Y) and not (Y <= X) [nonexec] .
endfth

fmod PAIR{X :: TOSET, Y :: TOSET} is 
	sort Pair{X,Y} .
	op [_?_] : X$Elt Y$Elt -> Pair{X,Y} .
	op _<=_ : Pair{X, Y} Pair{X, Y} -> Bool .
	vars A  C : X$Elt .
	vars B  D : Y$Elt .
	eq [ A ? B ] <= [C ? D] = ((A <= C) and not(A == C)) or ( (A == C) and (B <= D) ) .
endfm

view MyInt from TOSET to INT is
	sort Elt to Int .
endv

fmod PAIR-LEX is
	protecting PAIR{MyInt,MyInt} .
endfm